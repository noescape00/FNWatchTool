@using WatchTool.Common.Models
@using WatchTool.Common.P2P.Payloads
@model WatchTool.Common.Models.PeersInformationModel

@{
    ViewData["Title"] = "WatchTool Dashboard";
}

<style>
    .codeblock {
        font-family: Consolas, Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono, Bitstream Vera Sans Mono, Courier New, monospace, serif;
        font-size: 100%
    }

    @@media (min-width: 576px) {
        .modal-dialog {
            max-width: none;
        }
    }

    .modal-dialog {
        width: 80%;
        height: 85%;
        padding: 0;
    }
</style>

<br />
<br />
<p id="textContainer"></p>

<script>

    function callStartNode(updatePeerID) {
        var targetUrl = "@Url.Action("Request_StartNode", "Home")";
        callMethod(targetUrl, updatePeerID);
    }

    function callStopNode(updatePeerID) {
        var targetUrl = "@Url.Action("Request_StopNode", "Home")";
        callMethod(targetUrl, updatePeerID);
    }

    function callUpdateNode(updatePeerID) {
        var targetUrl = "@Url.Action("Request_Update", "Home")";
        callMethod(targetUrl, updatePeerID);
    }

    function callMethod(targetUrl, updatePeerID) {
        var model = { peerId: updatePeerID };

        replaceActionsWithLoadingScreen(updatePeerID);

        ajaxRequests++;

        $.ajax({
            type: "POST",
            url: targetUrl,
            data: model,
            dataType: 'html',
            contentType: "html",
            success: function (data) {
                var elementId = 'peerRow' + updatePeerID;
                ajaxRequests--;
                $('#' + elementId).html(data);
            },
            // Display error.
            error: function (jqXHR, textStatus, errorThrown) {

                $('#textContainer').html(jqXHR.responseText);

                ajaxRequests--;

                alert("Error, status = " + textStatus + ", " +
                    "error thrown: " + errorThrown + "jqXHR " + jqXHR.responseText
                );
            }
        });
    }

    function replaceActionsWithLoadingScreen(peerId) {

        var actionsId = 'actions' + peerId;

        $('#' + actionsId).html("executing command...");
    }

    // Auto refresh. This is really hacky but I don't have enough time for figuring out how to do refresh peers with ajax properly.
    var ajaxRequests = 0;

    var time = new Date().getTime();
    $(document.body).bind("mousemove keypress", function(e) {
        time = new Date().getTime();
    });

    function refresh() {
        if (new Date().getTime() - time >= 10000 && ajaxRequests == 0)
            window.location.reload(true);
        else
            setTimeout(refresh, 5000);
    }

    setTimeout(refresh, 5000);
</script>

<table class="table">
    <thead class="thead-dark">
    <tr>
        <th scope="col">EndPoint</th>
        <th scope="col">Node Version</th>
        <th scope="col">Is running</th>
        <th scope="col">Info</th>
        <th scope="col">Actions</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var peer in Model.PeersInfo)
    {
        string rowId = "peerRow" + peer.Id;

        <tr id="@rowId">
            @await Html.PartialAsync("~/Views/Partial/PeerRow.cshtml", peer)
        </tr>
    }
    </tbody>
</table>

<br/>
<br/>